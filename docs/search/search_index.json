{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MoBrix-ui","text":"<p>Smart React components for every app, easily customizable for every purpose.</p> <p></p> <p> </p> <p></p>"},{"location":"#status","title":"Status","text":""},{"location":"#note-for-mobrix-ui-v1-user","title":"Note for MoBrix-ui v1 user","text":"<p>MoBrix-ui v2 introduces some breaking changes that makes it not compatible with older MoBrix verions (using different lib versions in parallel is possible, but can cause some unexpected errors). If you are using MoBrix 1.X.X, please read the dedicated guide, or upgrade it to v3.X.X!</p>"},{"location":"#note-for-mobrix-ui-v2-user","title":"Note for MoBrix-ui v2 user","text":"<p>MoBrix-ui v3 introduces some breaking changes that makes it not compatible with older MoBrix verions (using different lib versions in parallel is possible, but can cause some unexpected errors). If you are using MoBrix 2.X.X, please read the dedicated guide, or upgrade it to v3.X.X!</p>"},{"location":"#mobrix-ui-philosophy","title":"MoBrix-ui philosophy","text":"<p>This library is built upon few (but important) concepts:</p> <ul> <li>Small library size, to not impact on final app bundle size</li> <li>Few dependencies, to not introduce a bunch of additional packages (that could also introduce bugs or version conflicts with pre-existent packages)</li> <li>Let the user customize every part as desired, but with default values set otherwise, to make every component ready to be used without so many parameters</li> <li>Every component should be integrable into every react app, so their behaviour must be customizable too (with callbacks, for example)</li> </ul> <p>The same concepts are also the base of another project I maintain, MoBrix-engine (check it out, it is also the base of MoBrix-ui guide page !)</p> <p></p>"},{"location":"#components-building-process","title":"Components building process","text":"<p>This library use a standardized process to build every component. As result, every component has a shared initial logic, shared CSS styles and shared properties. Some properties are shared between all components, for a smoother dev experience. In addition, this makes every single component easily re-usable.</p> <p></p>"},{"location":"#shared-properties","title":"Shared Properties","text":"Parameter Type Default key string / className string / dark boolean / hide boolean / id string / shadow boolean true style CSSProperties / unstyled boolean / animated boolean true background boolean true hover boolean true disabled boolean / additionalProps Record / <p>Check out the complete properties variables list for more details</p> <p></p>"},{"location":"#css-variables","title":"CSS variables","text":"<p>MoBrix-ui is globally configurable, with CSS variables. By defining some specific custom CSS variables into your app css, you'll change the UI of all components:</p> Prop Fallback Default --mbx-background / / --mbx-background-light --mbx-background linear-gradient(to right, #fff, #ededee, #e6e7e7) --mbx-background-dark --mbx-background linear-gradient(to right, #2d3748, #1d232e) --mbx-background-color / / --mbx-background-color-light --mbx-background-color #e9e9e9 --mbx-background-color-dark --mbx-background-color #1d232e --mbx-background-color-hover / / --mbx-background-color-hover-light --mbx-background-color-hover #dfeaf8 --mbx-background-color-hover-dark --mbx-background-color-hover #3a3552 --mbx-background-hover / / --mbx-background-hover-light --mbx-background-hover linear-gradient(to right, #ececec, #e1e1e6, #dbdddd) --mbx-background-hover-dark --mbx-background-hover linear-gradient(to right, #364257, #252d3b) --mbx-text-color / / --mbx-text-color-light --mbx-text-color #1b1b1b --mbx-text-color-dark --mbx-text-color white --mbx-text-color-hover / / --mbx-text-color-hover-light --mbx-text-color-hover #413c5c --mbx-text-color-hover-dark --mbx-text-color-hover #dfeaf8 --mbx-focus-color / / --mbx-focus-color-light --mbx-focus-color #7785ff --mbx-focus-color-dark --mbx-focus-color #fb7a10 <p>Check out the complete css variables list for more details</p> <p></p>"},{"location":"#reactive-components","title":"Reactive components","text":"<p>Some components are designed with a specific structure, to sync their internal state with an external input value. This kind of component handle internally their actual value, using the <code>value</code> parameter as starting point. This let the component to be driven in 2 different way:</p> <ul> <li> <p>Internally, Its internal <code>value</code>, when using the component without changing its value parameter from code</p> </li> <li> <p>External, passing the <code>value</code> parameter</p> </li> </ul> <p>So, we have 2 scenarios:</p> <ul> <li> <p>If you change the component value   using the component(without changing the <code>value</code> parameter), it will be updated internally.</p> </li> <li> <p>If you change the passed <code>value</code> parameter, the component will sync its value with the given one.</p> </li> </ul> <p>A clear example is the Input component. When changing the <code>value</code> parameter, the component will sync its actual value.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#installation","title":"Installation","text":"<p>If you want to use this library inside your project, just install it:</p> <pre><code>\nnpm i mobrix-ui\n\n</code></pre> <p></p>"},{"location":"#usage","title":"Usage","text":"<p>After installation, you can use every <code>MoBrix-ui</code> component in your app. Run this example to see them in action:</p> <pre><code>import { Card, Container, Link } from \"mobrix-ui\";\nimport { render } from \"react-dom\";\n\nrender(\n  &lt;Container animated&gt;\n    &lt;Card\n      dark={true}\n      body={&lt;p&gt;This page is entirely made with MoBrix-ui components !&lt;/p&gt;}\n      footer={\n        &lt;Link to=\"https://cianciarusocataldo.github.io/mobrix-ui\"&gt;\n          MoBrix-ui page\n        &lt;/Link&gt;\n      }\n    /&gt;\n  &lt;/Container&gt;,\n  document.getElementById(\"root\")\n);\n</code></pre> <p></p> <p></p> <p>If you want to customize the UI globally, initialize the dedicated CSS variables:</p> <pre><code>* {\n  --mbx-ui-text-color: #f5f5f5;\n  --mbx-ui-background-color: #1b1b1b;\n}\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"#tests","title":"Tests","text":"<p>Unit tests for every component are located inside <code>tests</code> folder. The test script is executed with pre-defined test command:</p> <pre><code>npm run test\n</code></pre> <p></p>"},{"location":"#authors","title":"Authors","text":"<ul> <li>Cataldo Cianciaruso</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details</p>"},{"location":"Changelog/","title":"MoBrix-ui changelog","text":""},{"location":"Changelog/#versions","title":"Versions","text":"<ul> <li>3.2.0</li> <li>3.1.0</li> <li>3.0.0</li> <li>2.1.0</li> <li>2.0.0</li> <li>1.2.0</li> <li>1.1.0</li> <li>1.0.0</li> </ul>"},{"location":"Changelog/#changes","title":"Changes","text":""},{"location":"Changelog/#320","title":"3.2.0","text":"<ul> <li> <p>New DatePicker css vars, to customize its internal modal</p> </li> <li> <p><code>--mbx-datepicker-modal-background-light</code>,</p> </li> <li><code>--mbx-datepicker-modal-background-dark</code>,</li> <li><code>--mbx-datepicker-modal-x-color-light</code>,</li> <li><code>--mbx-datepicker-modal-x-color-dark</code>,</li> <li><code>--mbx-datepicker-modal-x-color-hover-light</code>,</li> <li><code>--mbx-datepicker-modal-x-color-hover-dark</code>,</li> <li>Clean-up</li> <li>New CI workflow to publish MoBrix-ui package to github registry</li> <li>Automatic css variables docs generation</li> </ul> <p></p>"},{"location":"Changelog/#310","title":"3.1.0","text":"<ul> <li>New Card properties (<code>headerClassName</code>, <code>headerProps</code>, <code>bodyClassName</code>, <code>bodyProps</code>, <code>footerClassName</code>, <code>footerProps</code>)</li> <li>Clean-up</li> <li>Minor improvements</li> </ul>"},{"location":"Changelog/#300","title":"3.0.0","text":"<ul> <li>No more external dependencies</li> <li>Totally re-designed css variables system, to fully customize every component at once</li> <li>Docs and comments generator</li> <li>Global refactoring and huge clean-up</li> </ul>"},{"location":"Changelog/#210","title":"2.1.0","text":"<ul> <li><code>TabViewer</code> component</li> <li>Minor fixes</li> </ul>"},{"location":"Changelog/#200","title":"2.0.0","text":"<ul> <li><code>Calendar</code> component</li> <li><code>DatePicker</code> component</li> <li><code>Popup</code> component</li> <li><code>Selector</code> component</li> <li><code>Slider</code> component</li> <li><code>RadioButtonGroup</code> component</li> <li><code>RadioButton</code> component</li> <li><code>Reactive components</code> replace old <code>Box Components</code>, mantaining only the automatic input value sync with actual value set</li> <li>Better overall performance</li> <li>Huge cleanup</li> <li>Deep refactoring</li> <li>Minor fixes</li> </ul>"},{"location":"Changelog/#120","title":"1.2.0","text":"<ul> <li><code>Carousel</code> arrow fix</li> <li><code>ExpandableContainer</code> arrow fix</li> <li><code>FacebookButtons</code> component</li> </ul>"},{"location":"Changelog/#110","title":"1.1.0","text":"<ul> <li><code>readonly</code> support for <code>Rater</code> component</li> <li><code>Review</code> component</li> <li>Clean-up</li> </ul>"},{"location":"Changelog/#100","title":"1.0.0","text":"<ul> <li>MoBrix-ui-components library setup</li> </ul>"},{"location":"License/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022 Cataldo Cianciaruso</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"components/css-vars/","title":"MoBrix-ui full CSS variable list","text":""},{"location":"components/css-vars/#summary","title":"Summary","text":""},{"location":"components/props/","title":"MoBrix-ui full props list","text":""},{"location":"components/props/#summary","title":"Summary","text":""},{"location":"components/atoms/","title":"MoBrix-ui atoms","text":""},{"location":"components/atoms/#summary","title":"Summary","text":"<ul> <li>Button</li> <li>CheckBox</li> <li>CodeBox</li> <li>Counter</li> <li>Divider</li> <li>IconButton</li> <li>Input</li> <li>Label</li> <li>Link</li> <li>RadioButton</li> <li>Rater</li> <li>Selector</li> <li>Slider</li> <li>Spinner</li> <li>Toggle</li> </ul>"},{"location":"components/atoms/Button/","title":"Button page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/CheckBox/","title":"CheckBox page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/CodeBox/","title":"CodeBox page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/Counter/","title":"Counter page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/Divider/","title":"Divider page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/IconButton/","title":"IconButton page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/Input/","title":"Input page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/Label/","title":"Label page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/Link/","title":"Link page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/RadioButton/","title":"RadioButton page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/Rater/","title":"Rater page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/Selector/","title":"Selector page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/Slider/","title":"Slider page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/Spinner/","title":"Spinner page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/atoms/Toggle/","title":"Toggle page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/global/css-vars/","title":"MoBrix-ui global CSS variables","text":""},{"location":"components/global/css-vars/#summary","title":"Summary","text":"<ul> <li>CSS Variables table</li> <li>CSS Variables list</li> </ul>"},{"location":"components/global/css-vars/#css-variables-table","title":"CSS Variables table","text":"Prop Fallback Default --mbx-background / / --mbx-background-light --mbx-background linear-gradient(to right, #fff, #ededee, #e6e7e7) --mbx-background-dark --mbx-background linear-gradient(to right, #2d3748, #1d232e) --mbx-background-color / / --mbx-background-color-light --mbx-background-color #e9e9e9 --mbx-background-color-dark --mbx-background-color #1d232e --mbx-background-color-hover / / --mbx-background-color-hover-light --mbx-background-color-hover #dfeaf8 --mbx-background-color-hover-dark --mbx-background-color-hover #3a3552 --mbx-background-hover / / --mbx-background-hover-light --mbx-background-hover linear-gradient(to right, #ececec, #e1e1e6, #dbdddd) --mbx-background-hover-dark --mbx-background-hover linear-gradient(to right, #364257, #252d3b) --mbx-text-color / / --mbx-text-color-light --mbx-text-color #1b1b1b --mbx-text-color-dark --mbx-text-color white --mbx-text-color-hover / / --mbx-text-color-hover-light --mbx-text-color-hover #413c5c --mbx-text-color-hover-dark --mbx-text-color-hover #dfeaf8 --mbx-focus-color / / --mbx-focus-color-light --mbx-focus-color #7785ff --mbx-focus-color-dark --mbx-focus-color #fb7a10"},{"location":"components/global/css-vars/#css-variables-list","title":"CSS Variables list","text":""},{"location":"components/global/css-vars/#-mbx-background","title":"--mbx-background","text":"Fallback Default / / <p>Fallback value for <code>--mbx-background-light</code> and <code>--mbx-background-dark</code> variables</p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-light","title":"--mbx-background-light","text":"Fallback Default --mbx-background linear-gradient(to right, #fff, #ededee, #e6e7e7) <p>Global MoBrix-ui background, when dark mode is <code>off</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-dark","title":"--mbx-background-dark","text":"Fallback Default --mbx-background linear-gradient(to right, #2d3748, #1d232e) <p>Global MoBrix-ui background, when dark mode is <code>on</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-color","title":"--mbx-background-color","text":"Fallback Default / / <p>Fallback value for <code>--mbx-background-color-light</code> and <code>--mbx-background-color-dark</code> variables</p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-color-light","title":"--mbx-background-color-light","text":"Fallback Default --mbx-background-color #e9e9e9 <p>Global MoBrix-ui background color, when dark mode is <code>off</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-color-dark","title":"--mbx-background-color-dark","text":"Fallback Default --mbx-background-color #1d232e <p>Global MoBrix-ui background color, when dark mode is <code>on</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-color-hover","title":"--mbx-background-color-hover","text":"Fallback Default / / <p>Fallback value for <code>--mbx-background-color-hover-light</code> and <code>--mbx-background-color-hover-dark</code> variables</p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-color-hover-light","title":"--mbx-background-color-hover-light","text":"Fallback Default --mbx-background-color-hover #dfeaf8 <p>Global MoBrix-ui background color, when dark mode is <code>off</code>, on <code>hover</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-color-hover-dark","title":"--mbx-background-color-hover-dark","text":"Fallback Default --mbx-background-color-hover #3a3552 <p>Global MoBrix-ui background color, when dark mode is <code>on</code>, on <code>hover</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-hover","title":"--mbx-background-hover","text":"Fallback Default / / <p>Fallback value for <code>--mbx-background-hover-light</code> and <code>--mbx-background-hover-dark</code> variables</p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-hover-light","title":"--mbx-background-hover-light","text":"Fallback Default --mbx-background-hover linear-gradient(to right, #ececec, #e1e1e6, #dbdddd) <p>Global MoBrix-ui background, when dark mode is <code>off</code>, on <code>hover</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-background-hover-dark","title":"--mbx-background-hover-dark","text":"Fallback Default --mbx-background-hover linear-gradient(to right, #364257, #252d3b) <p>Global MoBrix-ui background, when dark mode is <code>on</code>, on <code>hover</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-text-color","title":"--mbx-text-color","text":"Fallback Default / / <p>Fallback value for <code>--mbx-text-color-light</code> and <code>--mbx-text-color-dark</code> variables</p> <p></p>"},{"location":"components/global/css-vars/#-mbx-text-color-light","title":"--mbx-text-color-light","text":"Fallback Default --mbx-text-color #1b1b1b <p>Global MoBrix-ui text color, when dark mode is <code>off</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-text-color-dark","title":"--mbx-text-color-dark","text":"Fallback Default --mbx-text-color white <p>Global MoBrix-ui text color, when dark mode is <code>on</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-text-color-hover","title":"--mbx-text-color-hover","text":"Fallback Default / / <p>Fallback value for <code>--mbx-text-color-hover-light</code> and <code>--mbx-text-color-hover-dark</code> variables</p> <p></p>"},{"location":"components/global/css-vars/#-mbx-text-color-hover-light","title":"--mbx-text-color-hover-light","text":"Fallback Default --mbx-text-color-hover #413c5c <p>Global MoBrix-ui text color, when dark mode is <code>off</code>, on <code>hover</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-text-color-hover-dark","title":"--mbx-text-color-hover-dark","text":"Fallback Default --mbx-text-color-hover #dfeaf8 <p>Global MoBrix-ui text color, when dark mode is <code>on</code>, on <code>hover</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-focus-color","title":"--mbx-focus-color","text":"Fallback Default / / <p>Fallback value for <code>--mbx-focus-color-light</code> and <code>--mbx-focus-color-dark</code> variables</p> <p></p>"},{"location":"components/global/css-vars/#-mbx-focus-color-light","title":"--mbx-focus-color-light","text":"Fallback Default --mbx-focus-color #7785ff <p>Global MoBrix-ui focus color, when dark mode is <code>off</code></p> <p></p>"},{"location":"components/global/css-vars/#-mbx-focus-color-dark","title":"--mbx-focus-color-dark","text":"Fallback Default --mbx-focus-color #fb7a10 <p>Global MoBrix-ui focus color, when dark mode is <code>on</code></p>"},{"location":"components/global/props/","title":"MoBrix-ui shared properties","text":""},{"location":"components/global/props/#summary","title":"Summary","text":"<ul> <li>Props table</li> <li>Props list</li> </ul>"},{"location":"components/global/props/#props-table","title":"Props table","text":"Parameter Type Default key string / className string / dark boolean / hide boolean / id string / shadow boolean true style CSSProperties / unstyled boolean / animated boolean true background boolean true hover boolean true disabled boolean / additionalProps Record /"},{"location":"components/global/props/#props-list","title":"Props list","text":""},{"location":"components/global/props/#key","title":"key","text":"Type Default string / <p>React key, the standard key parameter</p> <p></p> <p></p>"},{"location":"components/global/props/#classname","title":"className","text":"Type Default string / <p>custom className applied on main container</p> <p></p> <p></p>"},{"location":"components/global/props/#dark","title":"dark","text":"Type Default boolean / <p>Enable/disable dark mode</p> <p></p> <p></p>"},{"location":"components/global/props/#hide","title":"hide","text":"Type Default boolean / <p>Hide/show component</p> <p></p> <p></p>"},{"location":"components/global/props/#id","title":"id","text":"Type Default string / <p>id parameter (for styling/testing purpose, to easily find the component into the DOM)</p> <p></p> <p></p>"},{"location":"components/global/props/#shadow","title":"shadow","text":"Type Default boolean true <p>Enable/disable shadow behind component</p> <p></p> <p></p>"},{"location":"components/global/props/#style","title":"style","text":"Type Default CSSProperties / <p>Css inline properties applied on main container</p> <p></p> <p></p>"},{"location":"components/global/props/#unstyled","title":"unstyled","text":"Type Default boolean / <p>If <code>true</code>, no standard MoBrix-ui styles will be applied on the components (useful for example, with image buttons)</p> <p></p> <p></p>"},{"location":"components/global/props/#animated","title":"animated","text":"Type Default boolean true <p>Enable/disable component animations</p> <p></p> <p></p>"},{"location":"components/global/props/#background","title":"background","text":"Type Default boolean true <p>Enable/disable component background</p> <p></p> <p></p>"},{"location":"components/global/props/#hover","title":"hover","text":"Type Default boolean true <p>Enable/disable component hover standard styles</p> <p></p> <p></p>"},{"location":"components/global/props/#disabled","title":"disabled","text":"Type Default boolean / <p>If true, disable the component. The effect may vary depending on the component type</p> <p></p> <p></p>"},{"location":"components/global/props/#additionalprops","title":"additionalProps","text":"Type Default Record / <p>Custom additional properties, applied to the component</p> <p></p>"},{"location":"components/molecules/","title":"MoBrix-ui molecules","text":""},{"location":"components/molecules/#summary","title":"Summary","text":"<ul> <li>Card</li> <li>Carousel</li> <li>Container</li> <li>DismissableCard</li> <li>Dropdown</li> <li>ExpandableContainer</li> <li>FormField</li> <li>List</li> <li>Modal</li> <li>Popup</li> <li>RadioButtonGroup</li> <li>Review</li> <li>Table</li> <li>TabViewer</li> </ul>"},{"location":"components/molecules/Card/","title":"Card page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/Carousel/","title":"Carousel page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/Container/","title":"Container page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/DismissableCard/","title":"DismissableCard page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/Dropdown/","title":"Dropdown page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/ExpandableContainer/","title":"ExpandableContainer page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/FormField/","title":"FormField page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/List/","title":"List page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/Modal/","title":"Modal page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/Popup/","title":"Popup page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/RadioButtonGroup/","title":"RadioButtonGroup page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/Review/","title":"Review page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/TabViewer/","title":"TabViewer page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/molecules/Table/","title":"Table page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/organisms/","title":"MoBrix-ui organisms","text":""},{"location":"components/organisms/#summary","title":"Summary","text":"<ul> <li>Calendar</li> <li>DatePicker</li> <li>Drawer</li> <li>Form</li> </ul>"},{"location":"components/organisms/Calendar/","title":"Calendar page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/organisms/DatePicker/","title":"DatePicker page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/organisms/Drawer/","title":"Drawer page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"components/organisms/Form/","title":"Form page","text":"<ul> <li>Properties</li> <li>Css Variables</li> </ul>"},{"location":"old-guides/README_v1/","title":"MoBrix-ui - V1","text":"<p>React components for every app, easy to use and customize</p> <p></p>"},{"location":"old-guides/README_v1/#summary","title":"Summary","text":"<ul> <li>MoBrix-ui philosophy</li> <li>Components building process</li> <li>Shared components properties</li> <li>Customizable UI</li> <li>Box components</li> <li>Getting started</li> <li>Installation</li> <li>Usage</li> <li>Tests</li> <li>Authors</li> <li>License</li> </ul>"},{"location":"old-guides/README_v1/#mobrix-ui-philosophy","title":"mobrix-ui philosophy","text":"<p>This library is built upon few (but important) concepts:</p> <ul> <li>Small library size, to not impact on final app bundle size</li> <li>Few dependencies, to not introduce a bunch of additional packages (that could also introduce bugs or version conflicts with pre-existent packages)</li> <li>Let the user customize every part as desired, but with default values set otherwise, to make every component ready to be used without so many parameters</li> <li>Every component should be integrable into every react app, so their behaviour must be customizable too (with callbacks, for example)</li> </ul> <p>The same concepts are also the base of another project I maintain, MoBrix-engine (check it out, it is also the base of MoBrix-ui guide page !)</p> <p></p>"},{"location":"old-guides/README_v1/#components-building-process","title":"Components building process","text":"<p>This library use a standardized process to build every component. As result, every component has a shared initial logic, shared CSS styles and shared properties.</p> <p></p>"},{"location":"old-guides/README_v1/#shared-components-properties","title":"Shared components properties","text":"<p>Some properties are shared between all components, for a smoother dev experience. In addition, this makes every single component easily re-usable. Let's see them in details:</p> Property Description <code>className</code> custom className applied on main container <code>dark</code> Enable/disable dark mode <code>hide</code> Hide/show component <code>id</code> <code>data-id</code> parameter (for testing purpose, to easily find the component into the DOM) <code>shadow</code> Enable/disable shadow behind component <code>style</code> Css inline properties applied on main container <code>unstyled</code> If <code>true</code>, no standard mobrix-ui styles will be applied on the components (useful for example, with image buttons) <p>With these shared properties is possible to drive every component behaviour and UI with an external state management system</p> <p></p>"},{"location":"old-guides/README_v1/#customizable-ui","title":"Customizable UI","text":"<p>MoBrix-ui-components components UI is globally configurable, with CSS variables. By defining some specific custom CSS variables into your app css, you'll change the UI of all components:</p> CSS variable Description Default value Related CSS attribute <code>--mobrix-ui-custom-background-dark</code> Components background, when in dark-mode (dark is set to true). <code>linear-gradient(to right, #2d3748, #1d232e)</code> <code>background-image</code> <code>--mobrix-ui-custom-background-color-dark</code> Components background color, when in dark-mode (dark is set to true). <code>#1d232e</code> <code>background-color</code> <code>--mobrix-ui-custom-text-color-dark</code> Components text color, when in dark-mode (dark is set to true). <code>white</code> <code>text-color</code> <code>--mobrix-ui-custom-background-light</code> Components background, when not in dark-mode (dark is set to false). <code>linear-gradient(to right, #fff, #eaebec)</code> <code>background-image</code> <code>--mobrix-ui-custom-background-color-light</code> Components background color, when not in dark-mode (dark is set to false). <code>#f5f5f5</code> <code>background-color</code> <code>--mobrix-ui-custom-text-color-light</code> Components text color, when not in dark-mode (dark is set to false). <code>#1b1b1b</code> <code>text-color</code> <p>If you don't set these variables, the default values will be used.</p> <p></p>"},{"location":"old-guides/README_v1/#box-components","title":"Box components","text":"<p>Some components are designed with a specific structure, to better control and customize their look and feel. This type of components is called <code>Box Component</code>, for their particular structure. In addition to the shared properties, as they are part of MoBrix-ui, they accept 3 additional (and optional) properties:</p> <ul> <li><code>label</code>, a string or a component rendered above the final component</li> <li><code>value</code>, a specific property that drive the component UI, its type vary depends on component itself (for example, for the CheckBox component, it is the check status, as a <code>boolean</code> )</li> <li><code>defaultValue</code>, the default value to use when <code>value</code> is not given or is <code>undefined</code></li> </ul> <p></p>"},{"location":"old-guides/README_v1/#getting-started","title":"Getting started","text":""},{"location":"old-guides/README_v1/#installation","title":"Installation","text":"<p>If you want to use this library inside your project, just install it:</p> <pre><code>\nnpm i mobrix-ui\n\n</code></pre>"},{"location":"old-guides/README_v1/#usage","title":"Usage","text":"<p>After installation, you can use every <code>MoBrix-ui</code> component in your app. Run this example to see them in action:</p> <pre><code>import { Card, Container, Link } from \"mobrix-ui\";\nimport { render } from \"react-dom\";\n\nrender(\n  &lt;Container animated&gt;\n    &lt;Card\n      dark={true}\n      body={&lt;p&gt;This page is entirely made with MoBrix-ui components !&lt;/p&gt;}\n      footer={\n        &lt;Link to=\"https://cianciarusocataldo.github.io/mobrix-ui\"&gt;\n          MoBrix-ui page\n        &lt;/Link&gt;\n      }\n    /&gt;\n  &lt;/Container&gt;,\n  document.getElementById(\"root\"),\n);\n</code></pre> <p></p> <p></p> <p>If you want to customize the UI globally, initialize the dedicated CSS variables:</p> <pre><code>* {\n  --mobrix-ui-text-color: #f5f5f5;\n  --mobrix-ui-background-color: #1b1b1b;\n}\n</code></pre>"},{"location":"old-guides/README_v1/#tests","title":"Tests","text":"<p>Unit tests for every component are located inside <code>tests</code> folder. The test script is executed with pre-defined test command:</p> <pre><code>npm run test\n</code></pre> <p></p>"},{"location":"old-guides/README_v1/#authors","title":"Authors","text":"<ul> <li>Cataldo Cianciaruso</li> </ul>"},{"location":"old-guides/README_v1/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details</p>"},{"location":"old-guides/README_v2/","title":"MoBrix-ui","text":""},{"location":"old-guides/README_v2/#status","title":"Status","text":"<p>React components for every app, easy to use and customize.</p> <p></p>"},{"location":"old-guides/README_v2/#note-for-mobrix-ui-v1-user","title":"Note for MoBrix-ui v1 user","text":"<p>MoBrix-ui v2 introduces some breaking changes that makes it not compatible with older MoBrix verions (using different lib versions in parallel is possible, but can cause some unexpected errors). If you are using MoBrix 1.X.X, please read the dedicated guide, or upgrade it to v2.X.X!</p> <p></p>"},{"location":"old-guides/README_v2/#summary","title":"Summary","text":"<ul> <li>MoBrix-ui philosophy</li> <li>Components building process</li> <li>UI properties</li> <li>Accessibility properties</li> <li>CSS variables</li> <li>Reactive components</li> <li>Getting started</li> <li>Installation</li> <li>Usage</li> <li>Tests</li> <li>Authors</li> <li>License</li> </ul>"},{"location":"old-guides/README_v2/#mobrix-ui-philosophy","title":"MoBrix-ui philosophy","text":"<p>This library is built upon few (but important) concepts:</p> <ul> <li>Small library size, to not impact on final app bundle size</li> <li>Few dependencies, to not introduce a bunch of additional packages (that could also introduce bugs or version conflicts with pre-existent packages)</li> <li>Let the user customize every part as desired, but with default values set otherwise, to make every component ready to be used without so many parameters</li> <li>Every component should be integrable into every react app, so their behaviour must be customizable too (with callbacks, for example)</li> </ul> <p>The same concepts are also the base of another project I maintain, MoBrix-engine (check it out, it is also the base of MoBrix-ui guide page !)</p> <p></p>"},{"location":"old-guides/README_v2/#components-building-process","title":"Components building process","text":"<p>This library use a standardized process to build every component. As result, every component has a shared initial logic, shared CSS styles and shared properties. Some properties are shared between all components, for a smoother dev experience. In addition, this makes every single component easily re-usable.</p> <p></p>"},{"location":"old-guides/README_v2/#ui-properties","title":"UI properties","text":"Property Type Description Default value <code>className</code> <code>string</code> custom className applied on main container <code>\"\"</code> <code>dark</code> <code>boolean</code> Enable/disable dark mode <code>false</code> <code>hide</code> <code>boolean</code> Hide/show component <code>false</code> <code>id</code> <code>string</code> <code>data-id</code> parameter (for testing purpose, to easily find the component into the DOM) <code>/</code> <code>shadow</code> <code>boolean</code> Enable/disable shadow behind component <code>false</code> <code>style</code> <code>Record&lt;string,any&gt;</code> Css inline properties applied on main container <code>/</code> <code>unstyled</code> <code>boolean</code> If <code>true</code>, no standard mobrix-ui styles will be applied on the components (useful for example, with image buttons) <code>false</code> <code>animated</code> <code>boolean</code> Enable/disable component animations <code>false</code>"},{"location":"old-guides/README_v2/#accessibility-properties","title":"Accessibility properties","text":"<p>Some accessibility properties are shared between all components, for a better and smoother user experience, in any scenario:</p> Property Type Description Default value <code>onFocus</code> ( ) =&gt; <code>void</code> custom callback triggered when the component get the focus (for example, through tab key) <code>/</code> <code>onFocusLost</code> ( ) =&gt; <code>void</code> custom callback triggered when the component lose the focus (for example, when user clicks outside it) <code>/</code> <code>a11y</code> <code>boolean</code> Enable/disable accessibility features. <code>true</code> <code>a11yLabel</code> <code>string</code> If <code>a11y</code> = <code>true</code>, is used as aria-label accessibility parameter <code>/</code> <code>a11yDark</code> <code>boolean</code> If <code>a11y</code> = <code>true</code>, enable/disable dark mode for a11y styles. If not set, will be used the <code>dark</code> UI parameter same as <code>dark</code> or <code>false</code> <code>onKeyDown</code> (keyEvent : <code>any</code>) =&gt; <code>void</code> custom callback triggered when a key is pressed while using the component (for example, when writing text inside an <code>Input</code> component). <code>/</code> <p></p>"},{"location":"old-guides/README_v2/#css-variables","title":"CSS variables","text":"<p>MoBrix-ui is globally configurable, with CSS variables. By defining some specific custom CSS variables into your app css, you'll change the UI of all components:</p> CSS variable Description Default value Related CSS attribute <code>--mobrix-ui-custom-background-dark</code> Components background, when in dark-mode (dark is set to true). <code>linear-gradient(to right, #2d3748, #1d232e)</code> <code>background-image</code> <code>--mobrix-ui-custom-background-color-dark</code> Components background color, when in dark-mode (dark is set to true). <code>#1d232e</code> <code>background-color</code> <code>--mobrix-ui-custom-text-color-dark</code> Components text color, when in dark-mode (dark is set to true). <code>white</code> <code>text-color</code> <code>--mobrix-ui-custom-background-light</code> Components background, when not in dark-mode (dark is set to false). <code>linear-gradient(to right, #fff, #eaebec)</code> <code>background-image</code> <code>--mobrix-ui-custom-background-color-light</code> Components background color, when not in dark-mode (dark is set to false). <code>#f5f5f5</code> <code>background-color</code> <code>--mobrix-ui-custom-text-color-light</code> Components text color, when not in dark-mode (dark is set to false). <code>#1b1b1b</code> <code>text-color</code> <code>--mobrix-ui-custom-focus-color-light</code> If <code>a11yDark</code> = <code>false</code> , this color is used to update UI when a component is focused (with a screen reader or by navigating with the <code>Tab</code> key) <code>#7785ff</code> <code>box-shadow</code> / <code>color</code> <code>--mobrix-ui-custom-focus-color-dark</code> If <code>a11yDark</code> = <code>true</code> , this color is used to update UI when a component is focused (with a screen reader or by navigating with the <code>Tab</code> key) <code>#fb7a10</code> <code>box-shadow</code> / <code>color</code> <p></p>"},{"location":"old-guides/README_v2/#reactive-components","title":"Reactive components","text":"<p>Some components are designed with a specific structure, to sync their internal state with an external input value. This kind of component handle internally their actual value, using the <code>value</code> parameter as starting point. This let the component to be driven in 2 different way:</p> <ul> <li> <p>Internally, Its internal <code>value</code>, when using the component without changing its value parameter from code</p> </li> <li> <p>External, passing the <code>value</code> parameter</p> </li> </ul> <p>So, we have 2 scenarios:</p> <ul> <li> <p>If you change the component value   using the component(without changing the <code>value</code> parameter), it will be updated internally.</p> </li> <li> <p>If you change the passed <code>value</code> parameter, the component will sync its value with the given one.</p> </li> </ul> <p>A clear example is the Input component. When changing the <code>value</code> parameter, the component will sync its actual value.</p> <p></p> <p></p>"},{"location":"old-guides/README_v2/#getting-started","title":"Getting started","text":""},{"location":"old-guides/README_v2/#installation","title":"Installation","text":"<p>If you want to use this library inside your project, just install it:</p> <pre><code>\nnpm i mobrix-ui\n\n</code></pre> <p></p>"},{"location":"old-guides/README_v2/#usage","title":"Usage","text":"<p>After installation, you can use every <code>MoBrix-ui</code> component in your app. Run this example to see them in action:</p> <pre><code>import { Card, Container, Link } from \"mobrix-ui\";\nimport { render } from \"react-dom\";\n\nrender(\n  &lt;Container animated&gt;\n    &lt;Card\n      dark={true}\n      body={&lt;p&gt;This page is entirely made with MoBrix-ui components !&lt;/p&gt;}\n      footer={\n        &lt;Link to=\"https://cianciarusocataldo.github.io/mobrix-ui\"&gt;\n          MoBrix-ui page\n        &lt;/Link&gt;\n      }\n    /&gt;\n  &lt;/Container&gt;,\n  document.getElementById(\"root\"),\n);\n</code></pre> <p></p> <p></p> <p>If you want to customize the UI globally, initialize the dedicated CSS variables:</p> <pre><code>* {\n  --mobrix-ui-text-color: #f5f5f5;\n  --mobrix-ui-background-color: #1b1b1b;\n}\n</code></pre> <p></p>"},{"location":"old-guides/README_v2/#tests","title":"Tests","text":"<p>Unit tests for every component are located inside <code>tests</code> folder. The test script is executed with pre-defined test command:</p> <pre><code>npm run test\n</code></pre> <p></p>"},{"location":"old-guides/README_v2/#authors","title":"Authors","text":"<ul> <li>Cataldo Cianciaruso</li> </ul>"},{"location":"old-guides/README_v2/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details</p>"}]}